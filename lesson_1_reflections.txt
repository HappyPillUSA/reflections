* Basic Terminal Navigation for Mac user.


The Terminal is much like the finder, but less pretty. There are just a few basic commands needed to navigate around in Terminal. Using Terminal, we often refer to folders as directories.


* Most important comands to navigate.

Open up terminal, cmd + space "terminal".

pwd Figure out which directory you are currently in by "Printing the Working Directory".

ls List the directories and files inside the current directory.

ls -a include hidden files in the list of directories and files. This is helpful when trying to find hidden files like .git or .gitignore

cd [folder] Go into the folder. e.g. cd Desktop/Developer

cd This by itself will navigate all the way out to your Home Directory

cd .. Back out to the parent directory of the current directory.

open [file] Same as "double-clicking" a file or folder in finder.

open . Opens the current folder or file in finder or it's default application.

clear When you need a fresh Terminal window


* Understand the concept of version control.

Version control systems keep track of every change to a file over time so early versions can be restored and are used by software teams for source code.It is essencial for contributions between developers.

* Understand the difference between git software and GitHub the website.

Git is a revision control system, a tool to manage your source code history. GitHub is a hosting service for Git repositories. So they are not the same thing: Git is the tool, GitHub is the service for projects that use Git

* Understand terminology: branch, fork, merge, pull, push, remote

Branch -The first new branch you create will be based on the default branch, which is usually master. If you have more than one branch, you will be given a choice to base the new branch on the currently checked out branch or the default branch.

A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.

Merging is Git's way of putting a forked history back together again. The git merge command lets you take the independent lines of development created by git branch and integrate them into a single branch.

Pull requests let you tell others about changes you've pushed to a branch in a repository on GitHub.

Push - pushing sends the recent commit history from your local repository up to GitHub.

A remote in Git is a common repository that all team members use to exchange their changes. In most cases, such a remote repository is stored on a code hosting service like GitHub 


* Make your first pull request to a git repository on GitHub.




Viewing a diff between two files helps indentifying areas where a new bug may
have been introduced. So check those locations first when things are "suddenly"
broken.

Other notes:
Use git-bash to get linux style command prompt
on windows you have program called FC. Can be runned from commandline:
>>	FC file-old.js file-new.js

Reflect: Manual Commits
By committing manually instead of automaticall, you can decide what to commit and when.
This gives the opportunity to split the commits based on functionality. 
By committing manually you can specify commit messages describing what has changed, instead of only showing an auto commit.

Reflect: Multi-File commits
Multi-file commits are usefull when files are related to eachother.
"Normal" documents seldom have relations, so those are not needed. In sourcecode, files will have lots of relations.
So having multi-file commits is an essential feature.

Reflect: what do you want to try using Git for?
Source code for a simple website/game

Commands:

q |    exit git log!
git log  |    List the commits and show which files have changed
git log --stat  |    Show addition information about the commits
git diff id1 id2  |    Compare two commits
git clone  |    Create a local copy/clone from the repository
git config --global color.ui auto |    get colored diff output
git checkout  |    Shows a previous version of the file. This is not a checkout to edit like in SVN or TFS!
